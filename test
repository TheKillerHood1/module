getgenv().RS = game:GetService("ReplicatedStorage")
getgenv().PL = game:GetService("Players")
getgenv().HS = game:GetService("HttpService")
getgenv().LP = PL.LocalPlayer
local MsgReq = RS.DefaultChatSystemChatEvents.SayMessageRequest

local _module

_module = {
	Msg = function(arg) MsgReq:FireServer(arg, 'normalchat') end,
	DeclineRequest = function() RS.Trade.DeclineRequest:FireServer() end,
	DeclineTrade = function() RS.Trade.DeclineTrade:FireServer() end,
	AcceptRequest = function() RS.Trade.AcceptRequest:FireServer() end,
	AcceptTrade = function() RS.Trade.AcceptTrade:FireServer() end,
	AddItem = function(Item, amount)
		print(Item,amount)
		print("test1")
		print(#_module.Trade.BotOffer)
		if #_module.Trade.BotOffer>=4 then
			print("Bot cant offer more items")
			return false
		end
		print("test2")
		local count, category = _module.GetInventory(Item, false)
		if not count then return false end
		if count>=amount then
			for i=1,amount do
				RS.Trade.OfferItem:FireServer(Item, category)
				_module.GetInventory(Item, true)
			end
			return true
		else
			print("Bot dont have enough:",Item)
			return false
		end
		print("test3")
	end,
	RequestHandler = function() end, -- no need anything
	TradeHandler = function() end, -- no need anything
	GetInventory = function(arg, delete)
		if not arg then
			return RS.Remotes.Extras.GetData2:InvokeServer()
		elseif delete then
			local item = _module.ItemsTable[arg]
			_module.Trade.Inventory[item.Category].Owned[arg]-=1
		else
			local item = _module.ItemsTable[arg]
			if not item then
				print("Wrong GameName:", arg)
				return false
			end
			return _module.Trade.Inventory[item.Category].Owned[arg] or 0, item.Category
		end
	end,
	ParseOffer = function(Offer)
		
		--[[local temp = {}
		for i,v in next, Offer do
			local id, count = v[1], v[2]
			local item_db = _module.ItemsTable[id]
			temp[#temp+1] = {
				["name"] = id,
				["count"] = count,
				["asset"] = item_db.Id,
				["display"] = (id:lower():find("chroma") and "Chroma " or "")..item_db.Name,
				["rarity"] = item_db.Rarity,
				["category"] = item_db.Category
			}
		end]]
		
		local temp = {}
		for i,v in next, Offer do
			temp[v[1]] = v[2]
		end
		return temp
	end,
	GetTradeById = function(Id)
		for i,v in next, _module.TradeHistory do
			if v.TradeId == Id then
				return {
					Trader = {
						["UserId"] = v.User:split("|")[2],
						["Name"] =  v.User:split("|")[1]
					},
					BotOffer = _module.ParseOffer(v.MyOffer),
					TraderOffer = _module.ParseOffer(v.TheirOffer)
				}
			end
		end
		return false
	end,
	TradeHistory = {},
	ItemsTable = {},
	Trade = {
		Active = nil, -- Generated trade id - checking if trading
		CompletingTrade = nil,
		TraderOffer = {}, -- User offer - [{"name": "Sorry", "count":1, "asset": 123456789, "display": "Corrupt", "rarity": "Unique", "category": "Weapons"}]
		BotOffer = {}, -- Bot offer - looks like user offer ^
		Trader = {
			Name = "null",
			UserId = "null"
		}, -- User info
		Inventory = {
			Weapons = {},
			Pets = {}
		} -- Current bot inventory
	}
}

local Items = RS.GetSyncData:InvokeServer()
for GameName,Info in next, Items.Item do
	_module.ItemsTable[GameName] = {
		Rarity = Info.Rarity,
		Category = "Weapons",
		Name = Info.ItemName,
		Id = tonumber(Info.Image) and Info.Image or string.find(Info.Image, "http") and string.split(Info.Image, "d=")[2] or string.split(Info.Image, "//")[2]
	}
end;_module.ItemsTable.Ghosty = nil
for GameName,Info in next, Items.Pets do
	_module.ItemsTable[GameName] = {
		Rarity = Info.Rarity,
		Category = "Pets",
		Name = Info.Name,
		Id = tonumber(Info.Image) and Info.Image or string.find(Info.Image, "http") and string.split(Info.Image, "d=")[2] or string.split(Info.Image, "//")[2]
	}
end
local function AddToHistory(Trad)
	local tmpMy, tmpTheir = {}, {}
	for i,v in next , Trad.BotOffer do
		tmpMy[#tmpMy+1] = {v.name, v.count}
	end
	for i,v in next , Trad.TraderOffer do
		tmpTheir[#tmpTheir+1] = {v.name, v.count}
	end
	_module.TradeHistory[#_module.TradeHistory+1] = {
		["TradeId"] = Trad.Active,
		["User"] = ("%s|%s"):format(Trad.Trader.Name, Trad.Trader.UserId),
		["MyOffer"] = tmpMy,
		["TheirOffer"] = tmpTheir,
		["Timestamp"] = os.time()
	}
end

local reqq = false
RS.Trade.SendRequest.OnClientInvoke = function(player)
	if not reqq and not _module.Trade.Active and not _module.Trade.CompletingTrade then
		reqq = true
		spawn(function()
			task.wait(0.1)
			_module.RequestHandler(player)
			reqq = false
		end)
		return true
	end
	return false
end

if conss then
	print("Disconnected",#conss,"Connections")
	for i,v in next, conss do
		v:Disconnect()
	end
	table.clear(conss)
else
	getgenv().conss = {}
end

conss[#conss+1] = RS.Trade.StartTrade.OnClientEvent:connect(function(_, Player)
	table.clear(_module.Trade)
	_module.Trade.Active = HS:GenerateGUID(false)
	local plr = PL[Player]
	if plr and plr.Name then
		_module.Trade.Trader = {
			Name = plr.Name,
			UserId = plr.UserId
		}
		_module.Trade.Inventory = _module.GetInventory(false)
		_module.TradeHandler("started", _module.Trade)
	else
		_module.DeclineTrade()
	end
end)

conss[#conss+1] = RS.Trade.UpdateTrade.OnClientEvent:connect(function(Trade)
	local bot = "Player1"
	local user = "Player2"
	if Trade.Player1.Player ~= LP then
		bot = "Player2"
		user = "Player1"
	end
	_module.Trade.BotOffer = _module.ParseOffer(Trade[bot].Offer)
	_module.Trade.TraderOffer = _module.ParseOffer(Trade[user].Offer)
	_module.TradeHandler("updated", _module.Trade)
end)

conss[#conss+1] = RS.Trade.AcceptTrade.OnClientEvent:connect(function(Accept)
	if Accept then
		if Bot.Settings.LogTrades then
			AddToHistory(_module.Trade)
		end
		_module.Trade.CompletingTrade = _module.Trade.Active
		_module.TradeHandler("completed", _module.Trade)
		warn'ka'
		table.clear(_module.Trade)
	else
		_module.TradeHandler("accepted", _module.Trade)
	end
end)

--noob

conss[#conss+1] = RS.Trade.DeclineTrade.OnClientEvent:Connect(function()
	if _module.Trade.Active then
		_module.TradeHandler("cancelled", _module.Trade)
		table.clear(_module.Trade)
	end
end)

vu=game:GetService("VirtualUser")
conss[#conss+1] = LP.Idled:Connect(function()
	vu:CaptureController()
	vu:ClickButton2(Vector2.new())
end)
RS.Remotes.CustomGames.UpdateServerSettings:FireServer({
	["1v1Mode"] = false,
	["Disguises"] = false,
	["1v1ModeAuto"] = false,
	["DeadCanTalk"] = false,
	["LobbyMode"] = true,
	["RoundTimer"] = 30,
	["LockFirstPerson"] = false,
	["Assassin"] = false
})

return _module
